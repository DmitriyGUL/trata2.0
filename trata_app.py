import streamlit as st
import uuid
from datetime import datetime
import time

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
def init_session():
    defaults = {
        'groups': {},
        'expenses': {},
        'members': {},
        'current_group': None,
        'user_id': str(uuid.uuid4())[:8]
    }
    for key, val in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = val

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–ª–≥–æ–≤
def calculate_debts(group_id):
    members = st.session_state.members.get(group_id, [])
    expenses = st.session_state.expenses.get(group_id, [])
    
    if not members or not expenses:
        return []
    
    total_expenses = sum(float(e['amount']) for e in expenses)
    per_person = total_expenses / len(members)
    
    balances = {m: -per_person for m in members}
    
    for e in expenses:
        if e['payer'] in balances:
            balances[e['payer']] += float(e['amount'])
    
    debtors = []
    creditors = []
    
    for member, balance in balances.items():
        if balance < -0.01:
            debtors.append({'member': member, 'amount': -balance})
        elif balance > 0.01:
            creditors.append({'member': member, 'amount': balance})
    
    debtors.sort(key=lambda x: x['amount'], reverse=True)
    creditors.sort(key=lambda x: x['amount'], reverse=True)
    
    transactions = []
    d_index = 0
    c_index = 0
    
    while d_index < len(debtors) and c_index < len(creditors):
        debtor = debtors[d_index]
        creditor = creditors[c_index]
        amount = min(debtor['amount'], creditor['amount'])
        
        transactions.append({
            'from': debtor['member'],
            'to': creditor['member'],
            'amount': round(amount, 2)
        })
        
        debtor['amount'] -= amount
        creditor['amount'] -= amount
        
        if debtor['amount'] < 0.01:
            d_index += 1
        if creditor['amount'] < 0.01:
            c_index += 1
    
    return transactions

# –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
def main():
    st.set_page_config(
        page_title="Trata - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤—ã–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏",
        page_icon="üí∞",
        layout="centered",
        initial_sidebar_state="collapsed"
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
    init_session()
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ CSS —Å—Ç–∏–ª–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    st.markdown("""
    <style>
        /* –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω */
        .stApp {
            background: linear-gradient(135deg, #6a11cb 0%, #2575fc 100%);
            background-attachment: fixed;
            padding: 20px;
        }
        
        /* –ö–∞—Ä—Ç–æ—á–∫–∏ */
        .card {
            background: rgba(255, 255, 255, 0.92);
            border-radius: 20px;
            padding: 25px;
            margin-bottom: 20px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }
        
        /* –ö–Ω–æ–ø–∫–∏ */
        .stButton>button {
            background: linear-gradient(to right, #6a11cb, #2575fc) !important;
            color: white !important;
            border-radius: 50px !important;
            padding: 10px 20px !important;
        }
        
        /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */
        .stMarkdown h1 {
            color: white;
            text-align: center;
            margin-bottom: 30px;
        }
        
        /* –¶–≤–µ—Ç–∞ –¥–ª—è –¥–æ–ª–≥–æ–≤ */
        .debtor { color: #ff4757; font-weight: bold; }
        .creditor { color: #2ed573; font-weight: bold; }
        
        /* –ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è */
        @media (max-width: 768px) {
            .stButton>button { width: 100%; }
        }
    </style>
    """, unsafe_allow_html=True)
    
    # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    if st.session_state.current_group is None:
        st.markdown("<div class='card'>", unsafe_allow_html=True)
        st.title("üí∞ Trata")
        st.subheader("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤—ã–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏")
        
        with st.form("create_group_form"):
            group_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏", max_chars=50, placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
            col1, col2 = st.columns(2)
            with col1:
                create_btn = st.form_submit_button("–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É")
            with col2:
                join_btn = st.form_submit_button("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è")
                
            if create_btn and group_name:
                group_id = str(uuid.uuid4())
                st.session_state.groups[group_id] = {
                    'name': group_name,
                    'created_at': datetime.now().strftime("%Y-%m-%d %H:%M")
                }
                st.session_state.members[group_id] = [st.session_state.user_id]
                st.session_state.current_group = group_id
                st.experimental_rerun()
                
            if join_btn:
                st.session_state.show_join = True
                
        if st.session_state.get('show_join', False):
            with st.form("join_form"):
                group_id = st.text_input("ID –≥—Ä—É–ø–ø—ã", placeholder="–í–≤–µ–¥–∏—Ç–µ ID –≥—Ä—É–ø–ø—ã")
                if st.form_submit_button("–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è"):
                    if group_id in st.session_state.groups:
                        st.session_state.current_group = group_id
                        if st.session_state.user_id not in st.session_state.members[group_id]:
                            st.session_state.members[group_id].append(st.session_state.user_id)
                        st.experimental_rerun()
                    else:
                        st.error("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        st.markdown("</div>", unsafe_allow_html=True)
    
    # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≥—Ä—É–ø–ø—ã
    else:
        group_id = st.session_state.current_group
        group = st.session_state.groups[group_id]
        members = st.session_state.members.get(group_id, [])
        expenses = st.session_state.expenses.get(group_id, [])
        
        # –®–∞–ø–∫–∞
        st.markdown("<div class='card'>", unsafe_allow_html=True)
        st.title(group['name'])
        
        col1, col2, col3 = st.columns(3)
        with col1:
            if st.button("‚úö –£—á–∞—Å—Ç–Ω–∏–∫", use_container_width=True):
                st.session_state.show_add_member = True
        with col2:
            if st.button("‚úö –¢—Ä–∞—Ç–∞", use_container_width=True):
                st.session_state.show_add_expense = True
        with col3:
            if st.button("‚Üê –ù–∞–∑–∞–¥", use_container_width=True):
                st.session_state.current_group = None
                st.experimental_rerun()
        
        # –£—á–∞—Å—Ç–Ω–∏–∫–∏
        st.subheader("–£—á–∞—Å—Ç–Ω–∏–∫–∏")
        if members:
            st.write(", ".join(members))
        else:
            st.info("–ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        
        # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
        if st.session_state.get('show_add_member', False):
            with st.form("add_member_form"):
                new_member = st.text_input("–ò–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞")
                if st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å"):
                    if new_member:
                        st.session_state.members[group_id].append(new_member)
                        st.success(f"–£—á–∞—Å—Ç–Ω–∏–∫ {new_member} –¥–æ–±–∞–≤–ª–µ–Ω!")
                        st.session_state.show_add_member = False
                        time.sleep(1)
                        st.experimental_rerun()
        st.markdown("</div>", unsafe_allow_html=True)
        
        # –¢—Ä–∞—Ç—ã
        st.markdown("<div class='card'>", unsafe_allow_html=True)
        st.subheader("–¢—Ä–∞—Ç—ã")
        
        if expenses:
            for expense in expenses:
                st.markdown(f"""
                    <div style="
                        padding: 15px;
                        margin: 10px 0;
                        background: white;
                        border-radius: 10px;
                        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
                    ">
                        <div><b>{expense['description']}</b></div>
                        <div>üí≥ –û–ø–ª–∞—Ç–∏–ª: {expense['payer']}</div>
                        <div style="color: #ff4757; font-weight: bold;">üí∏ {expense['amount']} ‚ÇΩ</div>
                        <div style="font-size: 0.8em; color: #666;">‚è± {expense['date']}</div>
                    </div>
                """, unsafe_allow_html=True)
        else:
            st.info("–ü–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞—Ç")
        
        # –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞—Ç—ã
        if st.session_state.get('show_add_expense', False):
            with st.form("add_expense_form"):
                col1, col2 = st.columns(2)
                with col1:
                    description = st.text_input("–û–ø–∏—Å–∞–Ω–∏–µ")
                with col2:
                    amount = st.number_input("–°—É–º–º–∞", min_value=0.01, step=0.01)
                
                payer = st.selectbox("–ö—Ç–æ –æ–ø–ª–∞—Ç–∏–ª?", members)
                
                if st.form_submit_button("–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É"):
                    if description and amount:
                        new_expense = {
                            'id': str(uuid.uuid4()),
                            'description': description,
                            'amount': float(amount),
                            'payer': payer,
                            'date': datetime.now().strftime("%Y-%m-%d %H:%M")
                        }
                        st.session_state.expenses[group_id].append(new_expense)
                        st.success("–¢—Ä–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                        time.sleep(1)
                        st.session_state.show_add_expense = False
                        st.experimental_rerun()
        st.markdown("</div>", unsafe_allow_html=True)
        
        # –†–∞—Å—á–µ—Ç –¥–æ–ª–≥–æ–≤
        st.markdown("<div class='card'>", unsafe_allow_html=True)
        st.subheader("–†–∞—Å—á–µ—Ç –¥–æ–ª–≥–æ–≤")
        
        transactions = calculate_debts(group_id)
        if transactions:
            for t in transactions:
                st.markdown(f"""
                    <div style="
                        padding: 10px;
                        margin: 10px 0;
                        background: white;
                        border-radius: 10px;
                    ">
                        <span class="debtor">{t['from']}</span> ‚Üí 
                        <span class="creditor">{t['to']}</span>: 
                        <b>{t['amount']} ‚ÇΩ</b>
                    </div>
                """, unsafe_allow_html=True)
        else:
            st.info("–ù–µ—Ç –¥–æ–ª–≥–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞")
        
        if st.button("üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –¥–æ–ª–≥–∏", use_container_width=True):
            st.experimental_rerun()
        st.markdown("</div>", unsafe_allow_html=True)
        
        # –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        st.markdown("<div class='card'>", unsafe_allow_html=True)
        st.subheader("–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É")
        invite_code = f"ID –≥—Ä—É–ø–ø—ã: `{group_id}`"
        st.code(invite_code, language="text")
        st.info("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç ID –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º")
        st.markdown("</div>", unsafe_allow_html=True)

if __name__ == "__main__":
    main()
